install.packages(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
trainIndex = createDataPartition(diagnosis, p = 0.50)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
class(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
install.packages("gcmr")
eventsData = "C:/Users/aidan/Desktop/ICX/data/1430290802events.dat"
eventsData = "C:/Users/aidan/Desktop/ICX/data/1431241201events.dat"
data(iris)
sum(iris)
sum(iris[1:4,])
sum(iris[,1:4])
summary(iris[,1:4])
Winback <- as.data.frame(sample(1000, 100, replace=FALSE))
winback <- as.data.frame(sample(1000, 100, replace=FALSE))
winback <- as.data.frame(sample(1000, 100, replace=FALSE))
winback
winback$contact_ID <- as.data.frame(sample(1000, 100, replace=FALSE))
head(winback)
winback$contact_ID <- as.data.frame(sample(1000, 100, replace=FALSE))
winback = NULL
winback$contact_ID <- as.data.frame(sample(1000, 100, replace=FALSE))
head(winback)
head(winback)
winback = NULL
winback$contact_ID <- sample(1000, 100, replace=FALSE)
winback = as.data.frame(NULL)
winback = as.data.frame(NULL)
winback$contact_ID <- sample(1000, 100, replace=FALSE)
winback <- sample(1000, 100, replace=FALSE)
head(winback)
class(winback)
winback <- as.data.frame(sample(1000, 100, replace=FALSE))
head(winback)
dimnames(winback)
dimnames[[2]]
dimnames[[2]]
dimnames[2]
dimnames(winback)
?dimnames
class(winback)
dimnames(winback) <- "contact_ID"
dimnames(winback) <- c("contact_ID")
dimnames(winback) <- c("contact_ID")
colnames(winback)
colnames(winback) <- c("contact_ID")
head(winback)
ordersDetail <- as.data.frame(sample(2000, 300, replace=FALSE))
head(ordersDetail)
colnames(winback) <- c("CONTACT_ID")
head(ordersDetail)
colnames(winback) <- c("CONTACT_ID")
head(ordersDetail)
colnames(ordersDetail) <- c("CONTACT_ID")
head(ordersDetail)
ordersDetail$Total <- sample(500, 300, replace=TRUE)
ordersDetail$ORDERNUMBER <- sample(300, 300, replace=FALSE)
head(ordersDetail)
?sort
ordersDetail <- ordersDetail[sort(ordersDetail$ORDERNUMBER),]
head(ordersDetail)
sort(ordersDetail$ORDERNUMBER)
?order
order(ordersDetail[,"ORDERNUMBER"])
ordersDetail <- ordersDetail[order(ordersDetail[,ORDERNUMBER]),]
ordersDetail <- ordersDetail[order(ordersDetail[,"ORDERNUMBER"]),]
head(ordersDetail)
ORDERDATE <- seq(as.Date("2015/1/5"), as.Date("2015/12/31"), by = "week")
dim(ORDERDATE)
length(ORDERDATE)
ORDERDATE <- seq(as.Date("2014/1/5"), as.Date("2015/12/31"), by = "week")
length(ORDERDATE)
ORDERDATE <- seq(as.Date("2011/1/5"), as.Date("2016/12/31"), by = "week")
length(ORDERDATE)
ORDERDATE <- seq(as.Date("2011/1/5"), as.Date("2016/9/31"), by = "week")
ORDERDATE <- seq(as.Date("2011/1/5"), as.Date("2016/9/28"), by = "week")
length(ORDERDATE)
ordersDetail$ORDERDATE <- seq(as.Date("2011/1/5"), as.Date("2016/9/28"), by = "week")
head(ordersDetail)
ordersDetail[ordersDetail$ORDERDATE=="2015/6/1",]
ordersDetail[ordersDetail$ORDERDATE=="2015/6/2",]
ordersDetail[ordersDetail$ORDERDATE=="2015/6/3",]
ordersDetail[ordersDetail$ORDERDATE=="2015/6/10",]
ordersDetail[ordersDetail$ORDERDATE=="2015/6/17",]
ordersDetail[ordersDetail$ORDERDATE=="2015/6/10",]
287703*.44
library(caret)
library(mlbench)
data(Sonar)
set.seed(107)
head(Sonar)
str(Sonar)
str(Sonar$Class)
head(Sonar$Class)
inTrain <- createDataPartition(y=Sonar$Class, p=0.75, list=FALSE)
str(inTrain)
head(inTrain)
training -> a
"training" -> a
a
training <- Sonar[inTrain,]
head(training)
dim(training)
testing <- Sonar[-inTrain,]
dim(testing)
plsFit <- train(Class ~ ., data=training, method="pls", preProc=c("center", "scale"))
plsFit
plsFit <- train(Class ~ ., data=training, method="pls", tuneLength=15, preProc=c("center", "scale"))
plsFit
str(plsFit)
?lag
setwd("C:/Users/aidan/desktop/Time")
set.seed(1111)
#This will pull the IBM and Yahoo data using the Quantmod package
library(quantmod)
# tickers <- c("AAPL", "IBM")
# getSymbols(tickers)
# rAAPL <- weeklyReturn(AAPL)
# rIBM <- weeklyReturn(IBM)
tickers <- c("GSPC", "AAPL", "IBM", "GE", "MSFT")
#http://cran.r-project.org/web/packages/quantmod/quantmod.pdf
getSymbols(tickers, src="yahoo")
#head(IBM.uA <- adjustOHLC(IBM, use.Adjusted=TRUE))
#chartSeries(IBM.uA)
GSPC <- adjustOHLC(GSPC, use.Adjusted=TRUE)
AAPL <- adjustOHLC(AAPL, use.Adjusted=TRUE)
IBM <- adjustOHLC(IBM, use.Adjusted=TRUE)
GE <- adjustOHLC(GE, use.Adjusted=TRUE)
MSFT <- adjustOHLC(MSFT, use.Adjusted=TRUE)
data <- cbind(GSPC$GSPC.Close, AAPL$AAPL.Close, IBM$IBM.Close, GE$GE.Close, MSFT$MSFT.Close)
#Are there NA's?
apply(is.na(data), 2, sum)
#Apply the if else function the the columns of our data
#if the value is NA, then return the mean, else return the value
#wrapped in xts(          , order.by=time(data)  ) to maintain the dates
data <- xts(apply(data, 2, function(x) ifelse(is.na(x)==TRUE, mean(x,na.rm=TRUE), x)), order.by=time(data))
######### Everything following doesn't require stationarity
library(nnet)
library(caret)
#subset the last month of data into testing
testing <- data[(nrow(data)-30):nrow(data),]
#training <- data[-testing,]
#For the sake of computation I'm make the training set small
training <- data[-testing,]
training <- training[(nrow(training)-30):nrow(training),]
depVar <- training[,1]
indVar <- training[,-1]
# When you set linout=TRUE you choose the identity function (f(a) = a)
# as activation function for the output layer,
# i. e. you actually don't have an activation function in the output layer.
modelData <- data.frame(depVar, indVar)
# netModel <- train(as.numeric(depVar) ~ indVar, method='nnet', data=modelData,linout=TRUE, trace = FALSE,
#                   #Grid of tuning parameters to try:
#                   tuneGrid=expand.grid(.size=c(1,5,10, 15),.decay=c(0,0.001,0.1)))
netModel <- train(as.numeric(depVar) ~ indVar, method='nnet', data=modelData,linout=TRUE, trace = FALSE,
#Grid of tuning parameters to try:
tuneGrid=expand.grid(.size=c(1, 5, 10, 15),.decay=c(0,0.001,0.1)))
netModel
str(netModel)
netModel$coefnames
netModel$bestTune
netModel
netModel$bestTune
netPredict <- predict(netModel, newdata=testing)
netPredict
str(netPredict)
summary(netPredict)
netPredict-testing
netPredict <- predict(netModel, newdata=testing[,1])
netPredict-testing
netPredict <- predict(netModel, newdata=testing[,-1])
netPredict
netPredict-testing[,1]
(netPredict-testing[,1])^2
sum((netPredict-testing[,1])^2)
sse1 <- sum((netPredict-testing[,1])^2)
netPredict
salesP1 <- sum(netPredict)
salesP1
netPredict2 <- predict(netModel, newdata=testing[,-c(1, 2)])
sse2 <- sum((netPredict-testing[,1])^2)
salesP2 <- sum(netPredict)
sse1
sse2
netPredict2 <- predict(netModel, newdata=testing[,-c(1, 2)])
# sum of squared errors
sse2 <- sum((netPredict2-testing[,1])^2)
# sum of testing values
salesP2 <- sum(netPredict2)
sse1
sse2
testing[,-c(1, 2)]
head(testing[,-c(1, 2)])
head(testing[,-c(1)])
netPredict2 <- predict(netModel, newdata=testing[,-c(1, 2)])
head(netPredict)
head(netPredict2)
?match
match(netPredict, netPredict2)
salesP1
salesP2
netPredict2 <- predict(netModel, newdata=testing[,-c(1, 2, 3)])
# sum of squared errors
sse2 <- sum((netPredict2-testing[,1])^2)
# sum of testing values
salesP2 <- sum(netPredict2)
sse1
sse2
salesP2
netPredict2 <- predict(netModel, newdata=testing[,-c(1, 2, 3, 4)])
netPredict2
netPredict
netPredict2 <- predict(netModel, newdata=testing[,-c(1, 2, 3, 4, 5)])
netPredict2 <- predict(netModel, newdata=testing[,-c(1, 3, 4, 5)])
sse2 <- sum((netPredict2-testing[,1])^2)
# sum of testing values
salesP2 <- sum(netPredict2)
netPredict2
testing <- data[(nrow(data)-60):nrow(data),]
netPredict <- predict(netModel, newdata=testing[,-1])
setwd("C:/Users/aidan/desktop/Time")
set.seed(1111)
#This will pull the IBM and Yahoo data using the Quantmod package
library(quantmod)
# tickers <- c("AAPL", "IBM")
# getSymbols(tickers)
# rAAPL <- weeklyReturn(AAPL)
# rIBM <- weeklyReturn(IBM)
tickers <- c("GSPC", "AAPL", "IBM", "GE", "MSFT")
#http://cran.r-project.org/web/packages/quantmod/quantmod.pdf
getSymbols(tickers, src="yahoo")
#head(IBM.uA <- adjustOHLC(IBM, use.Adjusted=TRUE))
#chartSeries(IBM.uA)
GSPC <- adjustOHLC(GSPC, use.Adjusted=TRUE)
AAPL <- adjustOHLC(AAPL, use.Adjusted=TRUE)
IBM <- adjustOHLC(IBM, use.Adjusted=TRUE)
GE <- adjustOHLC(GE, use.Adjusted=TRUE)
MSFT <- adjustOHLC(MSFT, use.Adjusted=TRUE)
data <- cbind(GSPC$GSPC.Close, AAPL$AAPL.Close, IBM$IBM.Close, GE$GE.Close, MSFT$MSFT.Close)
#Are there NA's?
apply(is.na(data), 2, sum)
#Apply the if else function the the columns of our data
#if the value is NA, then return the mean, else return the value
#wrapped in xts(          , order.by=time(data)  ) to maintain the dates
data <- xts(apply(data, 2, function(x) ifelse(is.na(x)==TRUE, mean(x,na.rm=TRUE), x)), order.by=time(data))
library(nnet)
library(caret)
#subset the last month of data into testing
testing <- data[(nrow(data)-60):nrow(data),]
#training <- data[-testing,]
#For the sake of computation I'm make the training set small
testing <- data[(nrow(data)-30):nrow(data),]
training <- data[-testing,]
training <- training[(nrow(training)-30):nrow(training),]
testing <- data[(nrow(data)-60):nrow(data),]
dim(testing)
dim(training)
depVar <- training[,1]
indVar <- training[,-1]
modelData <- data.frame(depVar, indVar)
netModel <- train(as.numeric(depVar) ~ indVar, method='nnet', data=modelData,linout=TRUE, trace = FALSE,
#Grid of tuning parameters to try:
tuneGrid=expand.grid(.size=c(1, 5, 10, 15),.decay=c(0,0.001,0.1)))
netModel
head(testing)
head(testing{,-1})
head(testing[,-1])
netPredict <- predict(netModel, newdata=testing[,-1])
testingData <- testing[,-1]
netPredict <- predict(netModel, newdata=testingData)
?predict
class(testing)
class(modelData)
data.frame(testing[,-1])
testingData <- data.frame(testing[,-1])
netPredict <- predict(netModel, newdata=testingData)
class(netModel)
netPredict
netModel
object <- nnet(depVar ~ inVar, size=10, decay=0.1)
object <- nnet(depVar ~ indVar, size=10, decay=0.1)
object <- nnet(as.numeric(depVar) ~ indVar, size=10, decay=0.1)
class(object)
object
netModel$bestTune
netModel$bestTune[1]
netModel$bestTune[2]
head(testingData)
netPredict <- predict(object, newdata=testingData)
testing <- data[(nrow(data)-30):nrow(data),]
netPredict <- predict(object, newdata=testingData)
testingData <- data.frame(testing[,-1])
netPredict <- predict(object, newdata=testingData)
sse1 <- sum((netPredict-testing[,1])^2)
salesP1 <- sum(netPredict)
sse1
salesP1
head(netPredict)
sse1 <- sum((netPredict-testingData)^2)
# sum of testing values
salesP1 <- sum(netPredict)
sse1
head(netPredict)
head(testing[,1])
summary(netPredict)
tail(netPredict)
netPredict <- predict(object, newdata=testingData, type="class")
netPredict <- predict.nnet(object, newdata=testingData)
netPredict <- predict(object, newdata=testingData)
object
str(object)
netPredict <- predict(object, newdata=testingData)
head(netPredict)
max(netPredict)
min(netPredict)
str(netPredict)
summary(netPredict)
as.fact(netPredict)
as.factor(netPredict)
max(testing[,1])
check <- netPredict*(max(testing[,1]))
head(check)
head(testing[,1])
sse1 <- sum((check-testing[,1])^2)
salesP1 <- sum(check)
sse1
salesP1
netPredict <- predict(object, newdata=testingData[,-1])
head(netPredict)
check <- netPredict*(max(testing[,1]))
sse1 <- sum((check-testing[,1])^2)
salesP1 <- sum(check)
sse1
salesP1
