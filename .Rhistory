install.packages(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
trainIndex = createDataPartition(diagnosis, p = 0.50)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
class(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
install.packages("gcmr")
eventsData = "C:/Users/aidan/Desktop/ICX/data/1430290802events.dat"
eventsData = "C:/Users/aidan/Desktop/ICX/data/1431241201events.dat"
data(iris)
sum(iris)
sum(iris[1:4,])
sum(iris[,1:4])
summary(iris[,1:4])
setwd("C:/aidan/Users/desktop")
setwd("C:/Users/aidan/desktop/R/Test")
setwd("C:/Users/aidan/desktop/R/Test")
library(tseries)
# Procter and gamble
# na.locf removes NA and carries forward the most recent non NA value
AAPL <- na.locf(get.hist.quote("AAPL", quote="Adj", start="2005-12-25", retclass="zoo"))
IBM <- na.locf(get.hist.quote("IBM", quote="Adj", start="2005-12-25", retclass="zoo"))
# To make week end prices:
nextfri.Date <- function(x) 7 * ceiling(as.numeric(x - 1)/7) + as.Date(1)
wAAPL <- aggregate(AAPL, nextfri.Date,tail,1)
wIBM <- aggregate(IBM, nextfri.Date,tail,1)
# Convert weekly prices into weekly returns
lwrAAPL <- diff(log(wAAPL)) # convert prices to log returns
lwrIBM <- diff(log(wIBM)) # convert prices to log returns
# Write output data to csv file
write.zoo(wAAPL, file="w_AAPL.csv",sep=",",col.names=c("Dates","Percent Return"))
write.zoo(wIBM, file="w_IBM.csv",sep=",",col.names=c("Dates","Percent Return"))
library(ZOO)
install.packages("zoo")
install.packages("zoo")
install.packages("zoo")
setwd("C:/Users/aidan/desktop/R/Test")
library(tseries)
# Procter and gamble
# na.locf removes NA and carries forward the most recent non NA value
AAPL <- na.locf(get.hist.quote("AAPL", quote="Adj", start="2005-12-25", retclass="zoo"))
IBM <- na.locf(get.hist.quote("IBM", quote="Adj", start="2005-12-25", retclass="zoo"))
# To make week end prices:
nextfri.Date <- function(x) 7 * ceiling(as.numeric(x - 1)/7) + as.Date(1)
wAAPL <- aggregate(AAPL, nextfri.Date,tail,1)
wIBM <- aggregate(IBM, nextfri.Date,tail,1)
# Convert weekly prices into weekly returns
lwrAAPL <- diff(log(wAAPL)) # convert prices to log returns
lwrIBM <- diff(log(wIBM)) # convert prices to log returns
library(ZOO)
# Write output data to csv file
write.zoo(wAAPL, file="w_AAPL.csv",sep=",",col.names=c("date","percentReturn"))
write.zoo(wIBM, file="w_IBM.csv",sep=",",col.names=c("date","percentReturn"))
setwd("C:/Users/aidan/desktop/R/Test")
library(tseries)
setwd("C:/Users/aidan/desktop/R/Test")
library(tseries)
# Procter and gamble
# na.locf removes NA and carries forward the most recent non NA value
AAPL <- na.locf(get.hist.quote("AAPL", quote="Adj", start="2005-12-25", retclass="zoo"))
library(zoo)
# Procter and gamble
# na.locf removes NA and carries forward the most recent non NA value
AAPL <- na.locf(get.hist.quote("AAPL", quote="Adj", start="2005-12-25", retclass="zoo"))
IBM <- na.locf(get.hist.quote("IBM", quote="Adj", start="2005-12-25", retclass="zoo"))
class(AAPL)
class(IBM)
nextfri.Date <- function(x) 7 * ceiling(as.numeric(x - 1)/7) + as.Date(1)
wAAPL <- aggregate(AAPL, nextfri.Date,tail,1)
wIBM <- aggregate(IBM, nextfri.Date,tail,1)
head(wAAPL)
lwrAAPL <- diff(log(wAAPL)) # convert prices to log returns
lwrIBM <- diff(log(wIBM)) # convert prices to log returns
# Write output data to csv file
write.zoo(wAAPL, file="w_AAPL.csv",sep=",",col.names=c("date","percentReturn"))
write.zoo(wIBM, file="w_IBM.csv",sep=",",col.names=c("date","percentReturn"))
plot(wAAPL)
plot(wIBM)
lines(wAAPL)
plot(wAAPL)
lines(wIBM)
plot(lwrIBM)
lines(lwrAAPL)
acf(lwrIBM)
acf(lwrAAPL)
plot(wAAPL)
lines(wIBM)
plot(wAAPL)
lines(wIBM)
plot(lwrIBM)
lines(lwrAAPL)
plot(wAAPL)
lines(wIBM)
plot(lwrIBM)
lines(lwrAAPL)
acf(lwrIBM)
acf(lwrAAPL)
plot(wAAPL)
lines(wIBM)
install.packages("CausalImpact")
library(devtools)
devtools::install_github("google/CausalImpact")
library(CausalImpact)
dim(wlrAAPL)
dim(lwrAAPL)
dim(lwrIBM)
post.period <- c(401,491)
pre.period <- c(1,400)
post.period <- c(401,491)
impact <- CausalImpact(lwrAAPL, pre.period, post.period)
head(AAPL)
AAPL[400]
AAPL[1]
AAPL[401]
AAPL[491]
pre.period <- as.Date(c("2005-12-27","2007-07-31"))
post.period <- as.Date(c("2007-08-01","2007-12-07 "))
impact <- CausalImpact(lwrAAPL, pre.period, post.period)
plotl(impact)
plot(impact)
tail(lwrAAPL)
dim(lwraAAPL)
dim(lwrAAPL)
AAPL[450]
AAPL[475]
wAAPL <- read.csv("w_AAPL.csv")
wIBM <- read.csv("w_IBM.csv")
plot(wAAPL)
lines(wIBM)
lwrAAPL <- diff(log(wAAPL)) # convert prices to log returns
lwrIBM <- diff(log(wIBM)) # convert prices to log returns
class(wAAPL)
lwrAAPL <- diff(log(as.numeric(wAAPL))) # convert prices to log returns
lwrAAPL <- diff(log(wAAPL[,2])) # convert prices to log returns
lwrIBM <- diff(log(wIBM[,2])) # convert prices to log returns
plot(lwrIBM)
plot(wAAPL)
lines(wIBM)
lwrIBM <- diff(log(wIBM[,2])) # convert prices to log returns
plot(lwrIBM)
lwrAAPL <- wAAPL
lwrIBM <- wIBM
lwrAAPL[,2] <- diff(log(wAAPL[,2])) # convert prices to log returns
lwrAAPL[-1,2] <- diff(log(wAAPL[,2])) # convert prices to log returns
lwrIBM[-1,2] <- diff(log(wIBM[,2])) # convert prices to log returns
head(lwrAAPL)
head(wAAPL)
lwrAAPL <- lwrAAPL[-1,]
head(lwrAAPL)
lwrIBM <- lwrIBM[-1,]
plot(lwrIBM)
lines(lwrAAPL)
plot(lwrIBM)
?plot
plot(lwrIBM, type="l")
?plot
plot(lwrIBM, type="l")
lines(lwrAAPL)
head(lwrAAPL)
head(lwrIBM)
class(lwrAAPL)
class(lwrIBM)
class(lwrIBM[,1])
class(lwrIBM[,2])
class(lwrAAPL[,2])
class(lwrAAPL[,1])
plot(lwrIBM, type="l")
lines(lwrIBM)
lines(lwrIBM)
plot(lwrIBM)
lines(lwrIBM)
lines(lwrAAPL)
acf(lwrIBM)
plot(lwrIBM[,2], lwrIBM[,1])
plot(lwrIBM[,2], lwrIBM[,1], type="l")
plot(lwrIBM[,1], lwrIBM[,2], type="l")
plot(lwrIBM[,1], lwrIBM[,2], type="l")
lines(lwrIBM)
plot(lwrIBM)
lines(lwrIBM)
lines(lwrAAPL)
lwrAAPL[475,]
lwrAAPL[476,]
dim(lwrAAPL)
dim(lwrIBM)
pre.period <- as.Date(c("2005-12-27","2015-02-06"))
post.period <- as.Date(c("2015-02-13","2007-12-07 "))
impact <- CausalImpact(lwrAAPL, pre.period, post.period)
pre.period <- as.Date(c("2005-12-27","2015-02-06"))
tail(lwrIBM)
tail(lwrAAPL)
post.period <- as.Date(c("2015-02-13","2015-05-29 "))
pre.period <- as.Date(c("2005-12-27","2015-02-06"))
post.period <- as.Date(c("2015-02-13","2015-05-29 "))
impact <- CausalImpact(lwrAAPL, pre.period, post.period)
lwrAAPL[1,]
lwrAAPL[475,]
lwrAAPL[476,]
lwrAAPL[492,]
lwrAAPL[491,]
pre.period <- as.Date(c("2006-01-06","2015-02-06"))
post.period <- as.Date(c("2015-02-13","2015-05-29"))
impact <- CausalImpact(lwrAAPL, pre.period, post.period)
impact <- CausalImpact(lwrAAPL[,2], pre.period, post.period)
impact <- CausalImpact(lwrAAPL[,1], pre.period, post.period)
pre.period <- c(1,475)
post.period <- c(476,491)
impact <- CausalImpact(lwrAAPL[,1], pre.period, post.period)
impact <- CausalImpact(lwrAAPL[,2], pre.period, post.period)
plot(impact)
pre.period <- c(1,450)
post.period <- c(451,491)
impact <- CausalImpact(lwrAAPL[,2], pre.period, post.period)
plot(impact)
impact <- CausalImpact(wAAPL[,2], pre.period, post.period)
plot(impact)
is.na(wAAPL)
sum(is.na(wAAPL))
?CausalImpact
plot(impact)
impact <- CausalImpact(wAAPL, pre.period, post.period)
]
impact <- CausalImpact(wAAPL[,2], pre.period, post.period)
plot(impact)
summary(impact)
setwd("C:/Users/aidan/desktop/Time")
getwd()
library(Quantmod)
library(quantmod)
tickers <- c("AAPL", "IBM")
library(quantmod)
tickers <- c("AAPL", "IBM")
getSymbols(tickers)
wAAPL <- weeklyReturn(AAPL)
rAAPL <- weeklyReturn(AAPL)
rm(wAAPL)
rIBM <- weeklyReturn(IBM)
plot(AAPL)
lines(IBM)
dim(AAPL)
dim(IBM)
AAPL[1]
AAPL[2116]
IMB[1]
IBM[1]
IBM[2116]
lines(IBM)
line(IBM)
plot(IBM)
plot(AAPL)
plot(rAAPL)
plot(AAPL)
View(AAPL)
View(AAPL)
library(quantmod)
tickers <- c("AAPL", "IBM")
getSymbols(tickers)
dim(AAPL)
dim(IBM)
plot(AAPL)
head(AAPL)
plot(AAPL$AAPL.Close)
plot(AAPL$AAPL.Open)
plot(AAPL$AAPL.Volume)
plot(AAPL$AAPL.Close)
?getSymbols
chartSeries(AAPL)
?adjustOLHC
?adjustOHLC
adjustOHLC(AAPL, adjust=c("split", "dividend"))
AAPL <- adjustOHLC(AAPL, adjust=c("split", "dividend"))
plotSeries(AAPL)
chartSeries(AAPL)
getSymbols(tickers, adjust=TRUE)
chartSeries(AAPL)
?getSymbols
?adjustOHLC
AAPL <- adjustOHLC(AAPL, adjust=c("split", "dividend"), use.Adjusted=FALSE, ratio=NULL)
chartSeries(AAPL)
getSplits("AAPL")
getSymbols("AAPL", from="1990-01-01", src="yahoo")
head(AAPL)
chartSeries(AAPL)
head(AAPL.a <- adjustOHLC(AAPL))
head(AAPL.uA <- adjustOHLC(AAPL, use.Adjusted=TRUE))
chartSeries(AAPL.ua)
chartSeries(AAPL.uA)
getSymbols("AAPL", src="yahoo")
head(AAPL)
head(AAPL.a <- adjustOHLC(AAPL))
head(AAPL.uA <- adjustOHLC(AAPL, use.Adjusted=TRUE))
chartSeries(AAPL.uA)
chartSeries(AAPL)
chartSeries(AAPL.uA)
chartSeries(AAPL)
chartSeries(AAPL.uA)
getSymbols("AAPL", src="yahoo")
head(AAPL)
head(AAPL.a <- adjustOHLC(AAPL))
head(AAPL.uA <- adjustOHLC(AAPL, use.Adjusted=TRUE))
chartSeries(AAPL.a)
chartSeries(AAPL.uA)
chartSeries(IBM)
getSymbols("IBM", src="yahoo")
head(IBM)
head(IBM.a <- adjustOHLC(IBM))
head(IBM.uA <- adjustOHLC(IBM, use.Adjusted=TRUE))
chartSeries(IBM.a)
chartSeries(IBM.uA)
?chartSeries
dim(IBM)
dim(AAPL)
head(AAPL)
head(AAPL.a)
head(AAPL.uA)
AAPL <- AAPL.uA
IBM <- IBM.uA
chartSeries(AAPL)
sample(100)
?sample
?colNames
?names
dimnames(AAPL)
head(AAPL$AAPL.Open)
dim(AAPL)
nrow(AAPL)
AAPL$AAPL.Interest <- sample(50, size=nrow(AAPL), replace=TRUE)
head(AAPL)
?lm
reg <- lm(AAPL$AAPL.Close ~ AAPL$AAPL.Interest)
reg
summary(reg)
head(AAPL$AAPL.Interest)
lag(AAPL$AAPL.Interest, k=1)
head(AAPL$AAPL.Interest)
head(AAPL$AAPL.Interest <- lag(AAPL$AAPL.Interest, k=1))
head(AAPL$AAPL.Interest)
head(AAPL$AAPL.Interest <- lag(AAPL$AAPL.Interest, k=-1))
head(AAPL$AAPL.Interest <- lag(AAPL$AAPL.Interest, k=-1))
tail(AAPL$AAPL.Interest)
?set.seed
?seed
set.seed(1111)
setwd("C:/Users/aidan/desktop/Time")
set.seed(1111)
#This will pull the IBM and Yahoo data using the Quantmod package
library(quantmod)
# tickers <- c("AAPL", "IBM")
# getSymbols(tickers)
# rAAPL <- weeklyReturn(AAPL)
# rIBM <- weeklyReturn(IBM)
#http://cran.r-project.org/web/packages/quantmod/quantmod.pdf
getSymbols("AAPL", src="yahoo")
head(AAPL)
#Not quite sure what the difference is between these methods of adjustment. Use .uA
head(AAPL.a <- adjustOHLC(AAPL))
head(AAPL.uA <- adjustOHLC(AAPL, use.Adjusted=TRUE))
#Adjusted for stock splits and dividends AAPL.uA (I think!)
chartSeries(AAPL.uA)
chartSeries(IBM)
getSymbols("IBM", src="yahoo")
head(IBM)
head(IBM.a <- adjustOHLC(IBM))
head(IBM.uA <- adjustOHLC(IBM, use.Adjusted=TRUE))
chartSeries(IBM.uA)
AAPL <- AAPL.uA
IBM <- IBM.uA
#Add fake "interest level" variable. Sampling between 1:50
AAPL$AAPL.Interest <- sample(50, size=nrow(AAPL), replace=TRUE)
IBM$IBM.Interest <- sample(50, size=nrow(IBM), replace=TRUE)
reg <- lm(AAPL$AAPL.Close ~ AAPL$AAPL.Interest)
summary(reg)
head(AAPL$AAPL.Interest)
tail(AAPL$AAPL.Interest)
head(AAPL$AAPL.Interest <- lag(AAPL$AAPL.Interest, k=-1))
head(AAPL$AAPL.Interest)
tail(AAPL$AAPL.Interest)
dim(AAPL)
nrow(AAPL)
AAPL <- AAPL[-nrow(AAPL),]
tail(AAPL$AAPL.Interest)
reg <- lm(AAPL$AAPL.Close ~ AAPL$AAPL.Interest)
summary(reg)
chartSeries(log(AAPL))
chartSeries(AAPL)
chartSeries(log(AAPL))
install.packages(vars)
install.packages("vars")
library(vars)
?VAR
adf.test(AAPL$AAPL.Close, alternative="stationary")
?adf.test
adf.test(AAPL$AAPL.Close, alternative="explosive")
adf.test(AAPL$AAPL.Close, alternative="stationary")
adf.test(AAPL$AAPL.Close, alternative="stationary")
kpss.test(AAPL)
kpss.test(AAPL$AAPL.Close)
?nsdiffs
?nsdiffs
?diff
?ndiffs()
setwd("C:/Users/aidan/desktop/Time")
set.seed(1111)
#This will pull the IBM and Yahoo data using the Quantmod package
library(quantmod)
# tickers <- c("AAPL", "IBM")
# getSymbols(tickers)
# rAAPL <- weeklyReturn(AAPL)
# rIBM <- weeklyReturn(IBM)
#http://cran.r-project.org/web/packages/quantmod/quantmod.pdf
getSymbols("AAPL", src="yahoo")
head(AAPL)
#Not quite sure what the difference is between these methods of adjustment. Use .uA
head(AAPL.a <- adjustOHLC(AAPL))
head(AAPL.uA <- adjustOHLC(AAPL, use.Adjusted=TRUE))
#Adjusted for stock splits and dividends AAPL.uA (I think!)
chartSeries(AAPL.uA)
chartSeries(IBM)
getSymbols("IBM", src="yahoo")
head(IBM)
head(IBM.a <- adjustOHLC(IBM))
head(IBM.uA <- adjustOHLC(IBM, use.Adjusted=TRUE))
chartSeries(IBM.uA)
AAPL <- AAPL.uA
IBM <- IBM.uA
#Add fake "interest level" variable. Sampling between 1:50
AAPL$AAPL.Interest <- sample(50, size=nrow(AAPL), replace=TRUE)
IBM$IBM.Interest <- sample(50, size=nrow(IBM), replace=TRUE)
reg <- lm(AAPL$AAPL.Close ~ AAPL$AAPL.Interest)
summary(reg)
# playing around with the lag function:
#
# head(AAPL$AAPL.Interest)
# head(AAPL$AAPL.Interest <- lag(AAPL$AAPL.Interest, k=-1))
# tail(AAPL$AAPL.Interest)
# AAPL <- AAPL[-nrow(AAPL),]
chartSeries(log(AAPL))
chartSeries(AAPL)
library(vars)
####Augmented Dickey-Fuller (ADF)
#testing if the data is stationary ... the null is non-stationary
#small p-values we reject the null
#large p-values we fail to reject the null
#(and should transform the data if we require it to be stationary)
adf.test(AAPL$AAPL.Close, alternative="stationary")
adf.test(AAPL$AAPL.Interest, alternative="stationary")
library(forecast)
install.packages("forecast")
ns <- nsdiffs(AAPL)
ns <- nsdiffs(AAPL)
library(forecast)
ns <- nsdiffs(AAPL)
ndiffs(AAPL)
ns <- nsdiffs(AAPL$AAPL.Close)
head(AAPL$AAPL.Close)
nsdiffs(AAPL$AAPL.Close)
ndiffs(AAPL$AAPL.Close)
?nsdiffs
ndiffs(IBM$IBM.Close)
nsdiffs(IBM$IBM.Close)
?diff
ndiffs(AAPL$AAPL.Close)
ndiffs(AAPL$AAPL.Interest)
?diff
ndiffs(AAPL$AAPL.Close)
diff(AAPL$AAPL.Close, differences=1)
AAPL$AAPL.Close <- diff(AAPL$AAPL.Close, differences=1)
dim(AAPL$AAPL.Close)
dim(AAPL)
adf.test(AAPL$AAPL.Close, alternative="stationary")
adf.test(AAPL$AAPL.Close[-1,], alternative="stationary")
adf.test(IBM$IBM.Close, alternative="Stationary")
adf.test(IBM$IBM.Close, alternative="stationary")
ndiffs(IBM$IBM.Close)
IBM$IBM.Close <- diff(IBM$IBM.Close, differences=1)
adf.test(IBM$IBM.Close, alternative="stationary")
adf.test(IBM$IBM.Close[-1,], alternative="stationary")
plot(AAPL$AAPL.Close)
plot(IBM$IBM.Close)
fit <- Arima(IBM$IBM.Close, xreg=AAPL$AAPL.Close, order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
fit <- Arima(IBM$IBM.Close, xreg=AAPL$AAPL.Interest, order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
fit <- Arima(IBM$IBM.Close, xreg=AAPL$AAPL.Close, order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
fit <- Arima(IBM$IBM.Close, xreg=AAPL$AAPL.Close, order=c(2,0,0))
tsdisplay(arima.errors(fit), main="ARIMA errors")
fit2 <- Arima(IBM$IBM.Close, xreg=AAPL$AAPL.Close, order=c(1,0,2))
fit2
summary(fit2)
Box.test(residuals(fit2), fitdf=5, lag=10, type="Ljung")
